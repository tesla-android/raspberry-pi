From 4e614a104267c2833b22c84d9f28e3b9e1b42510 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Micha=C5=82=20Gapi=C5=84ski?= <mike@gapinski.eu>
Date: Sun, 13 Nov 2022 20:13:42 +0100
Subject: [PATCH 1/2] SurfaceFlinger: include secure layers in screen capture
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Change-Id: I2917bd819a083d9b0e93ceece893d5c64a193f25
Signed-off-by: Michał Gapiński <mike@gapinski.eu>
---
 services/surfaceflinger/SurfaceFlinger.cpp | 28 +++++++---------------
 1 file changed, 8 insertions(+), 20 deletions(-)

diff --git a/services/surfaceflinger/SurfaceFlinger.cpp b/services/surfaceflinger/SurfaceFlinger.cpp
index 305e08c714..155eaac2d2 100644
--- a/services/surfaceflinger/SurfaceFlinger.cpp
+++ b/services/surfaceflinger/SurfaceFlinger.cpp
@@ -7679,12 +7679,6 @@ void SurfaceFlinger::captureDisplay(const DisplayCaptureArgs& args,
         return;
     }
 
-    if (args.captureSecureLayers && !hasCaptureBlackoutContentPermission()) {
-        ALOGE("Attempting to capture secure layers without CAPTURE_BLACKOUT_CONTENT");
-        invokeScreenCaptureError(PERMISSION_DENIED, captureListener);
-        return;
-    }
-
     wp<const DisplayDevice> displayWeak;
     ui::LayerStack layerStack;
     ui::Size reqSize(args.width, args.height);
@@ -7718,7 +7712,7 @@ void SurfaceFlinger::captureDisplay(const DisplayCaptureArgs& args,
 
     RenderAreaFuture renderAreaFuture = ftl::defer([=] {
         return DisplayRenderArea::create(displayWeak, args.sourceCrop, reqSize, args.dataspace,
-                                         args.hintForSeamlessTransition, args.captureSecureLayers);
+                                         args.hintForSeamlessTransition, true);
     });
 
     GetLayerSnapshotsFunction getLayerSnapshots;
@@ -7734,7 +7728,7 @@ void SurfaceFlinger::captureDisplay(const DisplayCaptureArgs& args,
     }
 
     captureScreenCommon(std::move(renderAreaFuture), getLayerSnapshots, reqSize, args.pixelFormat,
-                        args.allowProtected, args.grayscale, captureListener);
+                        true, args.grayscale, captureListener);
 }
 
 void SurfaceFlinger::captureDisplay(DisplayId displayId, const CaptureArgs& args,
@@ -7772,7 +7766,7 @@ void SurfaceFlinger::captureDisplay(DisplayId displayId, const CaptureArgs& args
     RenderAreaFuture renderAreaFuture = ftl::defer([=] {
         return DisplayRenderArea::create(displayWeak, Rect(), size, args.dataspace,
                                          args.hintForSeamlessTransition,
-                                         false /* captureSecureLayers */);
+                                         true /* captureSecureLayers */);
     });
 
     GetLayerSnapshotsFunction getLayerSnapshots;
@@ -7792,7 +7786,7 @@ void SurfaceFlinger::captureDisplay(DisplayId displayId, const CaptureArgs& args
         return;
     }
 
-    constexpr bool kAllowProtected = false;
+    constexpr bool kAllowProtected = true;
     constexpr bool kGrayscale = false;
 
     captureScreenCommon(std::move(renderAreaFuture), getLayerSnapshots, size, args.pixelFormat,
@@ -7815,12 +7809,6 @@ void SurfaceFlinger::captureLayers(const LayerCaptureArgs& args,
     std::unordered_set<uint32_t> excludeLayerIds;
     ui::Dataspace dataspace = args.dataspace;
 
-    if (args.captureSecureLayers && !hasCaptureBlackoutContentPermission()) {
-        ALOGE("Attempting to capture secure layers without CAPTURE_BLACKOUT_CONTENT");
-        invokeScreenCaptureError(PERMISSION_DENIED, captureListener);
-        return;
-    }
-
     {
         Mutex::Autolock lock(mStateLock);
 
@@ -7888,7 +7876,7 @@ void SurfaceFlinger::captureLayers(const LayerCaptureArgs& args,
         }
 
         return std::make_unique<LayerRenderArea>(*this, parent, crop, reqSize, dataspace,
-                                                 childrenOnly, args.captureSecureLayers,
+                                                 childrenOnly, true,
                                                  layerTransform, layerBufferSize,
                                                  args.hintForSeamlessTransition);
     });
@@ -7935,7 +7923,7 @@ void SurfaceFlinger::captureLayers(const LayerCaptureArgs& args,
     }
 
     captureScreenCommon(std::move(renderAreaFuture), getLayerSnapshots, reqSize, args.pixelFormat,
-                        args.allowProtected, args.grayscale, captureListener);
+                        true, args.grayscale, captureListener);
 }
 
 void SurfaceFlinger::captureScreenCommon(RenderAreaFuture renderAreaFuture,
@@ -7959,7 +7947,7 @@ void SurfaceFlinger::captureScreenCommon(RenderAreaFuture renderAreaFuture,
     // application to avoid being screenshot or drawn via unsecure display.
     const bool supportsProtected = getRenderEngine().supportsProtectedContent();
     bool hasProtectedLayer = false;
-    if (allowProtected && supportsProtected) {
+    if (supportsProtected) {
         hasProtectedLayer = mScheduler
                                     ->schedule([=]() {
                                         bool protectedLayerFound = false;
@@ -7973,7 +7961,7 @@ void SurfaceFlinger::captureScreenCommon(RenderAreaFuture renderAreaFuture,
                                     })
                                     .get();
     }
-    const bool isProtected = hasProtectedLayer && allowProtected && supportsProtected;
+    const bool isProtected = hasProtectedLayer && supportsProtected;
     const uint32_t usage = GRALLOC_USAGE_HW_COMPOSER | GRALLOC_USAGE_HW_RENDER |
             GRALLOC_USAGE_HW_TEXTURE |
             (isProtected ? GRALLOC_USAGE_PROTECTED
-- 
2.34.1

